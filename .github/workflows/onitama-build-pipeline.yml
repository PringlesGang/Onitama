name: Onitama build pipeline

on: push

jobs:
  lint:
    name: Lint
    permissions:
      checks: write
      contents: read
    runs-on: ubuntu-latest
    
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
      - name: Update clang-format
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 19
          sudo apt install -y clang-format-19
          sudo update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-19 1000
          sudo update-alternatives --set clang-format /usr/bin/clang-format-19
          sudo update-alternatives --display clang-format
          clang-format --version
      
      - name: Lint
        uses: wearerequired/lint-action@v2
        with:
          clang_format: true
          clang_format_auto_fix: false
          continue_on_error: false

  build:
    name: Build
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            os_name: windows
            binary_path: Release/onitama.exe
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            os_name: linux
            binary_path: onitama
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            os_name: linux
            binary_path: onitama
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Onitama-${{ matrix.os_name }}-${{ matrix.c_compiler }}
        path: ${{ steps.strings.outputs.build-output-dir}}/${{ matrix.binary_path }}

  publish-release:
    name: Publish release
    if: github.ref == 'refs/heads/main'
    needs:
      - build
      - lint

    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      BUILD_VERSION: INVALID

    steps:
    - uses: actions/checkout@v4

    - name: Get build version
      run: echo "BUILD_VERSION=v$(cat VERSION)" >> $GITHUB_ENV

    - name: Get latest release version
      id: get-release-version
      uses: pozetroninc/github-action-get-latest-release@v0.8.0
      with:
        repository: ${{ github.repository }}
    
    - name: Download artifacts
      if: ${{ env.BUILD_VERSION != steps.get-release-version.outputs.release }}
      uses: actions/download-artifact@v4
      with:
        pattern: Onitama-*
        path: "${{ github.workspace }}/release"
        merge-multiple: true

    - name: Publish release
      if: ${{ env.BUILD_VERSION != steps.get-release-version.outputs.release }}
      uses: softprops/action-gh-release@v2
      with:
        name: ${{ env.BUILD_VERSION }}
        tag_name: ${{ env.BUILD_VERSION }}
        files:
          ${{ github.workspace }}/release/*
        prerelease: false
        draft: false
        fail_on_unmatched_files: true
        target_commitish: ${{ github.sha }}
        make_latest: true
        generate_release_notes: true